#301和302的区别：
#相同点：都表示重定向，浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址
#不同点：
#301比较常用的场景是使用域名跳转。比如，我们访问 http://www.baidu.com 会跳转到 https://www.baidu.com
#表示旧地址A的资源已经被永久地移除了
#302用来做临时跳转，比如未登陆的用户访问用户中心重定向到登录页面。表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B


SQL注入的原因
未对用户的输入进行过滤/审核
通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串
最终欺骗服务器执行恶意SQL命令

解决办法

过滤或审核用户的输入信息
检查是否包含有非法字符
使用SQL预编译语句


XSS
Cross Site Scripting跨站脚本攻击，是一种允许攻击者在用户浏览器中执行恶意脚本的脚本注入攻击。为什么不叫CSS(和样式单冲突了)

让受害者浏览器执行恶意脚本的唯一方式:把代码注入到受害者下载的网页中。

xss攻击的种类

1、持续型XSS攻击：恶意脚本来源于网站的数据库

1、攻击者通过评论表单提交将<script>alert(‘aaa’)</script>提交到网站

2、网站后端对提交的评论数据不做任何操作，直接存储到数据库中

3、其他用户访问正常访问网站，并且需要请求网站的评论数据

4、网站后端会从数据库中取出数据，直接返回给用户

5、用户得到页面后，直接运行攻击者提交的代码<script>alert(‘aaa’)</script>，所有用户都会在网页中弹出aaa的弹窗

这种攻击方式恶意代码会被存储在数据库中，其他用户在正常访问的情况下，也有会被攻击，影响的范围比较大

2、反射型XSS攻击：恶意脚本来源于受害者的请求

在一个反射型XSS攻击中，恶意文本属于受害者发送给网站的请求中的一部分。随后网站又把恶意文本包含进用于响应用户的返回页面中，发还给用户。

1、用户误点开了带攻击的url :http://xxx?keyword=<script>alert('aaa')</script>

2、网站给受害者的返回中包含了来自URL的的恶意文本

3、用户的浏览器收到文本后执行页面，会在网页中弹窗aaa

反射型的攻击需要用户主动的去访问带攻击的链接，攻击者可以通过邮件或者短信的形式，诱导受害者点开链接。如果攻击者配合短链接URL，攻击成功的概率会更高

总结：引导用户点击连接(该链接中包含恶意脚本)，然后(网站)返回恶意脚本并执行。



3、基于DOM的XSS攻击

基于DOM的XSS攻击是反射型攻击的变种。服务器返回的页面是正常的，只是我们在页面执行js的过程中，会把攻击代码植入到页面中

下面展示的是这种攻击的场景

1、用户误点开了带攻击的url :http://xxx?name=<script>alert('aaa')</script>

2、网站给受害者的返回中正常的网页

3、用户的浏览器收到文本后执行页面合法脚本，这时候页面恶意脚本会被执行，会在网页中弹窗aaa

这种攻击方式发生在我们合法的js执行中，服务器无法检测我们的请求是否有攻击的危险


如何防止攻击

XSS攻击其实就是在用户的页面注入恶意脚本(代码)。用户的输入被编译为恶意的脚本.

1 编码，对用户的输入进行转义，千万不能将用户的输入当初代码处理，而要当初数据处理。

2 校验,对用户的输入进行过滤检查。



CSRF

利用受信任的用户进行跨站请求伪造
主要原因:
用户在没有退出正在访问网站A的登录的情况下，访问危险网站B,
B网站可以利用用户的cookie信息伪造请求访问A


如何防止攻击

1 输入验证码

2 csrftoken参数





















